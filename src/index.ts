import "dotenv/config.js";
import { Markup, Telegraf } from 'telegraf';
import { registerFitnessTestActions } from './components/fitnessTest';
import { registerFitnessMenuActions } from "./components/menu";
import { checkUserExists, setupDb } from './database/database';
import { EDIT_DATA, SEND_PHOTO, START_TEST, UserState } from './types';

export const bot = new Telegraf(process.env.BOT_TOKEN!);
export const userStates = new Map<string, UserState>();

bot.start(async (ctx) => {
    const userId: string = ctx.from.id.toString();
    await setupDb();

    const userExists = await checkUserExists(userId);

    if (userExists) {
        ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äì —Ñ–∏—Ç–Ω–µ—Å—Å –ø–æ–º–æ—â–Ω–∏–∫ –¢—Ä–µ–π–Ω–∏.\n–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.inlineKeyboard([
            [Markup.button.callback('ü•ë –ü—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞', SEND_PHOTO)],
            [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', EDIT_DATA)],
            [Markup.button.callback('üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞', START_TEST)]
        ]));
    } else {
        ctx.replyWithMarkdown('–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äì —Ñ–∏—Ç–Ω–µ—Å—Å –ø–æ–º–æ—â–Ω–∏–∫ –¢—Ä–µ–π–Ω–∏.\n–ù–∞–ø–∏—à—É —Ç–µ–±–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–æ–º–æ–≥—É –µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.\n\n–ù–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–Ω–µ–º —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ.',
            Markup.inlineKeyboard([
                Markup.button.callback('–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', START_TEST)
            ])
        );
    }
});

registerFitnessTestActions(bot);
registerFitnessMenuActions(bot);

setupDb().then(() => {
    bot.launch();
    console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
});