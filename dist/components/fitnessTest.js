"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerFitnessTestActions = exports.startTest = exports.updateState = void 0;
const telegraf_1 = require("telegraf");
const database_1 = require("../database/database");
const index_1 = require("../index");
const types_1 = require("../types");
const helpers_1 = require("../utils/helpers");
function updateState(userId, updates) {
    const currentState = index_1.userStates.get(userId) || { step: 1 };
    const newState = Object.assign(Object.assign({}, currentState), updates);
    index_1.userStates.set(userId, newState);
}
exports.updateState = updateState;
const startTest = (ctx) => {
    const userId = ctx.from.id.toString();
    index_1.userStates.set(userId, { step: 1 });
    ctx.reply('–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?', telegraf_1.Markup.inlineKeyboard([
        telegraf_1.Markup.button.callback('–Ø - –º—É–∂—á–∏–Ω–∞', types_1.SET_GENDER_MALE),
        telegraf_1.Markup.button.callback('–Ø - –∂–µ–Ω—â–∏–Ω–∞', types_1.SET_GENDER_FEMALE)
    ]));
};
exports.startTest = startTest;
function registerFitnessTestActions(bot) {
    bot.action(types_1.START_TEST, exports.startTest);
    bot.action(types_1.SET_GENDER_MALE, (ctx) => {
        const userId = ctx.from.id.toString();
        updateState(userId, { gender: '–ú—É–∂—á–∏–Ω–∞', step: 2 });
        askGoal(ctx);
    });
    bot.action(types_1.SET_GENDER_FEMALE, (ctx) => {
        const userId = ctx.from.id.toString();
        updateState(userId, { gender: '–ñ–µ–Ω—â–∏–Ω–∞', step: 2 });
        askGoal(ctx);
    });
    bot.action(types_1.GOAL_LOSE_WEIGHT, (ctx) => {
        const userId = ctx.from.id.toString();
        updateState(userId, { goal: '–ü–æ—Ö—É–¥–µ—Ç—å', step: 3 });
        askAge(ctx);
    });
    bot.action(types_1.GOAL_MAINTAIN_WEIGHT, (ctx) => {
        const userId = ctx.from.id.toString();
        updateState(userId, { goal: '–î–µ—Ä–∂–∞—Ç—å —Å–≤–æ–π –≤–µ—Å', step: 3 });
        askAge(ctx);
    });
    bot.action(types_1.GOAL_GAIN_WEIGHT, (ctx) => {
        const userId = ctx.from.id.toString();
        updateState(userId, { goal: '–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å', step: 3 });
        askAge(ctx);
    });
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    bot.action(types_1.ACTIVITY_NONE, (ctx) => {
        const userId = ctx.from.id.toString();
        updateState(userId, { activity: '–ù–∏—á–µ–º –Ω–µ –∑–∞–Ω–∏–º–∞—é—Å—å', step: 7 });
        askHealthIssues(ctx);
    });
    bot.action(types_1.ACTIVITY_MEDIUM, (ctx) => {
        const userId = ctx.from.id.toString();
        updateState(userId, { activity: '–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', step: 7 });
        askHealthIssues(ctx);
    });
    bot.action(types_1.ACTIVITY_HIGH, (ctx) => {
        const userId = ctx.from.id.toString();
        updateState(userId, { activity: '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å', step: 7 });
        askHealthIssues(ctx);
    });
    bot.action(types_1.ACTIVITY_VERY_HIGH, (ctx) => {
        const userId = ctx.from.id.toString();
        updateState(userId, { activity: '–û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π', step: 7 });
        askHealthIssues(ctx);
    });
    bot.on('text', (ctx) => __awaiter(this, void 0, void 0, function* () {
        const userId = ctx.from.id.toString();
        const state = index_1.userStates.get(userId);
        if (!state)
            return;
        switch (state.step) {
            case 3: // –í–æ–ø—Ä–æ—Å –æ –≤–æ–∑—Ä–∞—Å—Ç–µ
                if (!/^\d{1,2}$/.test(ctx.message.text)) {
                    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏');
                    return;
                }
                updateState(userId, { age: parseInt(ctx.message.text), step: 4 });
                ctx.reply('–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–∞—Ö?');
                break;
            case 4: // –í–æ–ø—Ä–æ—Å –æ –≤–µ—Å–µ
                if (!/^\d{1,3}$/.test(ctx.message.text)) {
                    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ü–∏—Ñ—Ä–∞–º–∏');
                    return;
                }
                updateState(userId, { weight: parseInt(ctx.message.text), step: 5 });
                ctx.reply('–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?');
                break;
            case 5: // –í–æ–ø—Ä–æ—Å –æ —Ä–æ—Å—Ç–µ
                if (!/^\d{1,3}$/.test(ctx.message.text)) {
                    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏');
                    return;
                }
                updateState(userId, { height: parseInt(ctx.message.text), step: 6 });
                askActivityLevel(ctx); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± —É—Ä–æ–≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                break;
            case 7: // –í–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ
                updateState(userId, { healthIssues: ctx.message.text });
                ctx.reply('–°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–∞—Ä–∞ –º–∏–Ω—É—Ç ü•ë').then((_a) => __awaiter(this, [_a], void 0, function* ({ message_id }) {
                    yield (0, helpers_1.animateThinking)("–°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–∞—Ä–∞ –º–∏–Ω—É—Ç ", ctx, message_id);
                    yield (0, helpers_1.delay)(6500);
                    const userData = {
                        telegram_id: userId,
                        gender: state.gender,
                        goal: state.goal,
                        age: state.age,
                        weight: state.weight,
                        height: state.height,
                        activity_level: state.activity,
                        health_issues: ctx.message.text
                    };
                    try {
                        const qMsg = '–í–∞—à –ò–Ω–¥–µ–∫—Å –ú–∞—Å—Å—ã –¢–µ–ª–∞ (–ò–ú–¢) —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 26.5, —á—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å". –û–±—ã—á–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ò–ú–¢ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 18.5 –¥–æ 24.9.\n–ë–∞–∑–∞–ª—å–Ω—ã–π –ú–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–π –†–∞—Å—Ö–æ–¥ (–ë–ú–†) —Ä–∞–≤–µ–Ω 2127.5 –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å. –≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—à–µ —Ç–µ–ª–æ —Ç—Ä–∞—Ç–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.\n–í–∞—à –û–±—â–∏–π –î–Ω–µ–≤–Ω–æ–π –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –†–∞—Å—Ö–æ–¥ (–û–î–≠–†), —É—á–∏—Ç—ã–≤–∞—è –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 2553 –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞ –≤–∞—à–µ–º—É –æ—Ä–≥–∞–Ω–∏–∑–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–∫–æ–ª–æ —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–ª–æ—Ä–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç –≤ 700 –∫–∞–ª–æ—Ä–∏–π –æ—Ç –≤–∞—à–µ–≥–æ –û–î–≠–† –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è, –≤–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ –¥–µ–Ω—å –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–∫–æ–ª–æ 1853 –∫–∞–ª–æ—Ä–∏–π. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è.\n–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∂–∏–¥–∫–æ—Å—Ç–∏: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–∏—Ç—å –æ–∫–æ–ª–æ 30-35 –º–ª –≤–æ–¥—ã –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∏–ª–æ–≥—Ä–∞–º–º –≤–µ—Å–∞ —Ç–µ–ª–∞. –î–ª—è –≤–∞—Å —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 3120 - 3640 –º–ª (3.1 - 3.6 –ª–∏—Ç—Ä–∞) –≤–æ–¥—ã –≤ –¥–µ–Ω—å.';
                        yield (0, database_1.upsertUser)(userData);
                        ctx.reply(qMsg);
                    }
                    catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
                    }
                    index_1.userStates.delete(userId);
                }));
                break;
        }
    }));
}
exports.registerFitnessTestActions = registerFitnessTestActions;
const askGoal = (ctx) => {
    ctx.reply('–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?', telegraf_1.Markup.inlineKeyboard([
        [telegraf_1.Markup.button.callback('–ü–æ—Ö—É–¥–µ—Ç—å', types_1.GOAL_LOSE_WEIGHT)],
        [telegraf_1.Markup.button.callback('–î–µ—Ä–∂–∞—Ç—å —Å–≤–æ–π –≤–µ—Å', types_1.GOAL_MAINTAIN_WEIGHT)],
        [telegraf_1.Markup.button.callback('–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å', types_1.GOAL_GAIN_WEIGHT)]
    ]));
};
const askAge = (ctx) => {
    ctx.reply('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?');
};
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ä–æ—Å—Ç–µ
const askActivityLevel = (ctx) => {
    ctx.reply('–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?\n\nü•ë –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º\nü•ë –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å 3-5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º\nü•ë –û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π 6-7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º', telegraf_1.Markup.inlineKeyboard([
        [telegraf_1.Markup.button.callback('–ù–∏—á–µ–º –Ω–µ –∑–∞–Ω–∏–º–∞—é—Å—å', types_1.ACTIVITY_NONE)],
        [telegraf_1.Markup.button.callback('–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', types_1.ACTIVITY_MEDIUM)],
        [telegraf_1.Markup.button.callback('–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å', types_1.ACTIVITY_HIGH)],
        [telegraf_1.Markup.button.callback('–û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π', types_1.ACTIVITY_VERY_HIGH)]
    ]));
};
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ
function askHealthIssues(ctx) {
    ctx.reply('–ï—Å—Ç—å –ª–∏ –∞–ª–ª–µ—Ä–≥–∏—è, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ –µ–¥–µ –∏–ª–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è?');
}
